const h : float = 1e-4;
const alpha : float = 1e4;
const beta : float = 1e3;
const massperunitarea = 10.0;
const gravity = [0.0, 9.8];

element Point
	init_position : tensor[2](float);
	position : tensor[2](float);
	velocity : tensor[2](float);
	pinned : bool;
end

element HyperEdge
	mass : float;
	energy : float;
	energyDensity : float;
	init_area : float; 					% A_i
	dPhi : tensor[2,2](float);			% Dɸ
	strain : tensor[2,2](float); 		% ε, strain tensor
	dDphi : tensor[4,6](float); 		% ∂Dɸ/∂v
	dStrain : tensor[4,4](float); 		% ∂ε/∂Dɸ	
	dEnergyDensity : tensor[4](float); 	% ∂W/∂ε
	dEnergy : tensor[6](float); 		% ∂E = ∑ A_i ∂W ∂ε ∂Dɸ %T_i
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The simulation consists of a set of Points
% and a set of HyperEdges per Point triple
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

extern points  : set{Point};
extern hyperedges : set{HyperEdge}(points,points,points);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% UTILITIES %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func inverse2x2(A : tensor[2,2](float)) ->
                (Ainv : tensor[2,2](float))

    detA = ( A(0,0) * A(1,1) - A(1,0) * A(0,1) );   
    Ainv(0,0) = A(1,0);
    Ainv(0,1) = -A(0,1);
    Ainv(1,0) = -A(1,0);
    Ainv(1,1) = A(0,0); 
    Ainv =  (1.0/detA) * Ainv;                
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func trace2x2(A : tensor[2,2](float)) -> (tr : float)
             
    tr = A(0,0) + A(1,1);           
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% PRECOMPUTES %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func precompute_area(tri: HyperEdge, p : (Point*3)) -> 
                    (a : tensor[hyperedges](float))

    ubar = p(1).init_position - p(0).init_position;
    vbar = p(2).init_position - p(0).init_position;
    
    u = p(1).position - p(0).position;
    v = p(2).position - p(0).position;

    I = [	1.0, 0.0; 
    		0.0, 1.0	];
        
    var A = I;

    A(0,0) = ubar(0);
    A(0,1) = vbar(0);
    A(1,0) = ubar(1);
    A(1,1) = vbar(1);
    
    detA = ( A(0,0) * A(1,1) - A(1,0) * A(0,1) );   

    a(tri) = 0.5 * detA;
	if (detA < 0.0) 
		a(tri) = -a(tri); 		%abs area
	end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func precompute_dDphi_dV(inout tri: HyperEdge, p : (Point*3)) 

    J = [	0.0, 1.0; 
    		-1.0, 0.0	];
	vbar13 = p(0).init_position-p(2).init_position;
	vbar23 = p(1).init_position-p(2).init_position;
	vbar13o = J * vbar13;
	vbar23o = J * vbar23;
	var dDphi = [	0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
				0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
				0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
				0.0, 0.0, 0.0, 0.0, 0.0, 0.0	];
    dDphi(0,0) = vbar23o(0);  		  		  
    dDphi(0,2) = -vbar13o(0);
    dDphi(0,4) = vbar13o(0) - vbar23o(0);
    dDphi(1,0) = vbar23o(1);  		  		  
    dDphi(1,2) = -vbar13o(1);
    dDphi(1,4) = vbar13o(1) - vbar23o(1);
    dDphi(2,1) = vbar23o(0);  		  		  
    dDphi(2,3) = -vbar13o(0);
    dDphi(2,5) = vbar13o(0) - vbar23o(0);
    dDphi(3,1) = vbar23o(1);  		  		  
    dDphi(3,3) = -vbar13o(1);
    dDphi(3,5) = vbar13o(1) - vbar23o(1);    
	tri.dDphi = (dDphi/(vbar23o'*vbar13));
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_g(p : Point) -> (g : tensor[points](tensor[2](float)))
  g(p) = gravity';

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% COMPUTES %%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_dPhi(inout tri : HyperEdge, p: (Point*3) )

	var Dphi = [0.0, 0.0; 0.0, 0.0];
    J = [	0.0, 1.0; 
    		-1.0, 0.0	];
	vbar13 = p(0).init_position-p(2).init_position;
	vbar23 = p(1).init_position-p(2).init_position;
	vbar13o = J * vbar13;
	vbar23o = J * vbar23;
	v13 = p(0).position-p(2).position;
	v23 = p(1).position-p(2).position;
	v13o = J * v13;
	v23o = J * v23;		
	Dphi(0,0) = v13(0)*vbar23o(0) - v23(0)*vbar13o(0);
	Dphi(0,1) = v13(0)*vbar23o(1) - v23(0)*vbar13o(1);
	Dphi(1,0) = v13(1)*vbar23o(0) - v23(1)*vbar13o(0);
	Dphi(1,1) = v13(1)*vbar23o(1) - v23(1)*vbar13o(1);
	
	Dphi = (Dphi/(vbar23o'*vbar13));
	tri.dPhi = Dphi;

	vbar21 = p(1).init_position-p(0).init_position;
	v21 = p(1).position-p(0).position;
end	    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_strain_tensor(inout tri : HyperEdge, p : (Point*3) ) 

    I = [	1.0, 0.0; 
    		0.0, 1.0	];
    tri.strain = (tri.dPhi' * tri.dPhi - I) / 2.0;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_energy_density(inout tri : HyperEdge)

    trs = trace2x2(tri.strain);
    trs2 = trace2x2(tri.strain*tri.strain);
    tri.energyDensity = alpha * trs2 + 0.5 * beta * trs*trs;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_energy(inout tri : HyperEdge) 
				-> (E: tensor[hyperedges](float))

	tri.energy = tri.energyDensity * tri.init_area;
	E(tri) = tri.energy;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_dstrain_dDphi(inout tri: HyperEdge, p : (Point*3)) 

	%calculate dE/Dɸ (4x4)
	var dE = [	0.0, 0.0, 0.0, 0.0;
				0.0, 0.0, 0.0, 0.0;
				0.0, 0.0, 0.0, 0.0;
				0.0, 0.0, 0.0, 0.0	];
	dE(0,0) = (2.0*tri.dPhi(0,0));
	dE(0,2) = (2.0*tri.dPhi(1,0));
	dE(1,0) = tri.dPhi(0,1);
	dE(1,1) = tri.dPhi(0,0);
	dE(1,2) = tri.dPhi(1,1);
	dE(1,3) = tri.dPhi(1,0);
	dE(2,0) = tri.dPhi(0,1);
	dE(2,1) = tri.dPhi(0,0);
	dE(2,2) = tri.dPhi(1,1);
	dE(2,3) = tri.dPhi(1,0);	
	dE(3,1) = (2.0*tri.dPhi(0,1));
	dE(3,3) = (2.0*tri.dPhi(1,1));
	tri.dStrain = dE/2.0;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_dEnergyDensity_dStrain(inout tri: HyperEdge) 

	var dW = [	0.0, 0.0, 0.0, 0.0  ];
	dW(0) = alpha*2.0*tri.strain(0,0) + beta*trace2x2(tri.strain);
	dW(1) = alpha*2.0*tri.strain(1,0);
	dW(2) = alpha*2.0*tri.strain(0,1);
	dW(3) = alpha*2.0*tri.strain(1,1) + beta*trace2x2(tri.strain);
	tri.dEnergyDensity = dW';

%print tri.dEnergyDensity;

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_dEnergy(inout tri : HyperEdge, p : (Point*3)) 

	dE_tri = tri.init_area * tri.dEnergyDensity' * 
		 	 tri.dStrain * tri.dDphi;
	tri.dEnergy = dE_tri';
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func create_dEnergy_matrix(tri : HyperEdge, p : (Point*3)) ->
							(dE : tensor[points](tensor[2](float)))
							
	dE(p(0))(0) = tri.dEnergy(0) ;
	dE(p(0))(1) = tri.dEnergy(1) ;
	dE(p(1))(0) = tri.dEnergy(2) ;
	dE(p(1))(1) = tri.dEnergy(3) ;
	dE(p(2))(0) = tri.dEnergy(4) ;
	dE(p(2))(1) = tri.dEnergy(5) ;	
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
func compute_mass(tri : HyperEdge, p : (Point*3)) ->
					(M : tensor[points,points](tensor[2,2](float)))

  I2 = [1.0, 0.0; 0.0, 1.0];
  if (p(0).pinned)
  	M(p(0),p(0)) = 0.0 * I2;	
  else
	M(p(0),p(0)) = ((tri.mass/3.0)) * I2;
  end
  if (p(1).pinned)
  	M(p(1),p(1)) = 0.0 * I2;	
  else
	M(p(1),p(1)) = ((tri.mass/3.0)) * I2;
  end
  if (p(2).pinned)
  	M(p(2),p(2)) = 0.0 * I2;
  else
    M(p(2),p(2)) = ((tri.mass/3.0)) * I2;
  end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% INTERFACE %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
proc init

    hyperedges.init_area = map precompute_area to hyperedges;
    hyperedges.mass = hyperedges.init_area * massperunitarea;
    map precompute_dDphi_dV to hyperedges;
	println " ";
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
proc main
	
  % for print (point x)
    map compute_dPhi to hyperedges;	
    map compute_strain_tensor to hyperedges;	
    map compute_dstrain_dDphi to hyperedges;
	
    points.position = points.position + h * points.velocity;	
    
  % for dE calculation (point x+1)
    M = map compute_mass to hyperedges reduce +;

  % compute inverse Mass Matrix
	var Minv : tensor[points,points](tensor[2,2](float));
    Minv = M;
    for p in points
    	if (p.pinned)
    		Minv(p,p)(0,0) = M(p,p)(0,0);
    		Minv(p,p)(1,1) = M(p,p)(1,1);
		else
    		Minv(p,p)(0,0) = 1.0/M(p,p)(0,0);
		   	Minv(p,p)(1,1) = 1.0/M(p,p)(1,1);
		end
    end
    map compute_dPhi to hyperedges;	
    map compute_strain_tensor to hyperedges;	
    map compute_dstrain_dDphi to hyperedges;
    map compute_energy_density to hyperedges; 

	E = map compute_energy to hyperedges reduce +;
	
  %% DEBUG energy out
	var system_pot_energy : float;
	for i in hyperedges
		system_pot_energy = system_pot_energy + E(i);
	end
	var system_kinetic_energy : float;
	system_kinetic_energy = 0.5* (points.velocity)'*M*(points.velocity);
	println ((system_pot_energy)+(system_kinetic_energy));
	
	map compute_dEnergyDensity_dStrain to hyperedges;
	map compute_dEnergy to hyperedges reduce +;
	
	dE = map create_dEnergy_matrix to hyperedges reduce +;
	g = map compute_g to points;
    points.velocity = points.velocity 
    				  - (h * Minv * dE) 
    				  - (h * Minv * g);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NOTES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% ∂E = 	∑ 	A_i	∂W 	∂ε 	∂Dɸ T_i
% 				1x4	4x4	4x6	6x2v_count
%
% A_i = area of triangle i at rest (precomputed)
%
% ∂W = α [2ε_11 2ε_21 2ε_12 2ε_22] + β [(tr ε) 0 0 (tr ε)]
%											, where (tr ε) = ε_11 + ε_22
% 
% ∂ε = 0.5* [	2Dɸ_11	0		2Dɸ_21	0	
%				Dɸ_12	Dɸ_11	Dɸ_22	Dɸ_21
%				Dɸ_12	Dɸ_11	Dɸ_22	Dɸ_21
%				0		2Dɸ_12	0		2Dɸ_22 ]
%
% ∂Dɸ = 1 / ((v̅2-v̅3)^⊥ • (v̅1-v̅3)) 
% [ (v̅2-v3)^⊥_x, 0, -(v̅1-v̅3)^⊥_x, 0, -(v̅2-v̅3)^⊥_x+(v̅1-v̅3)_x, 0
%   0, (v̅2-v̅3)^⊥_x, 0,-(v̅1-v̅3)^⊥_x, 0, -(v̅2-v̅3)^⊥_x+(v̅1-v̅3)_x, 0	
%   (v̅2-v̅3)^⊥_y, 0, -(v̅1-v̅3)^⊥_y, 0, -(v̅2-v̅3)^⊥_y+(v̅1-v̅3)_y, 0
%   0, (v̅2-v̅3)^⊥_y, 0,-(v̅1-v̅3)^⊥_y, 0, -(v̅2-v̅3)^⊥_y+(v̅1-v̅3)_y, 0 ]
%
% T_i = [	1	0	0	... 			v̅1.x
%			0	1	0	... 			v̅1.y
%			...							v̅2.x
%			...							v̅2.y
%			...							v̅3.x
%			...					]		v̅3.y	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%